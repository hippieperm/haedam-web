import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const supabase = await createClient();

    // Fetch item with all related data
    const { data: item, error } = await supabase
      .from('items')
      .select(`
        *,
        seller:users(id, name, nickname, profile_image, created_at),
        media:item_media(*),
        bids(*, bidder:users(id, nickname)),
        watchlists(user_id)
      `)
      .eq('id', id)
      .is('deleted_at', null)
      .single();

    if (error || !item) {
      return NextResponse.json(
        { success: false, message: "상품을 찾을 수 없습니다" },
        { status: 404 }
      );
    }

    // Increment view count
    await supabase
      .from('items')
      .update({ view_count: (item.view_count || 0) + 1 })
      .eq('id', id);

    // Sort media by sort order
    if (item.media) {
      item.media.sort((a: any, b: any) => (a.sort || 0) - (b.sort || 0));
    }

    // Sort bids by amount descending
    if (item.bids) {
      item.bids.sort((a: any, b: any) => (b.amount || 0) - (a.amount || 0));
    }

    return NextResponse.json({
      success: true,
      data: item,
    });
  } catch (error) {
    console.error("Failed to fetch item:", error);
    return NextResponse.json(
      { success: false, message: "상품 정보를 불러오는데 실패했습니다." },
      { status: 500 }
    );
  }
}
