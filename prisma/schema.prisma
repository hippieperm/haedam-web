// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id            String      @id @default(cuid())
  email         String      @unique
  passwordHash  String      @map("password_hash")
  role          UserRole    @default(USER)
  name          String?
  nickname      String?
  phone         String?
  isVerified    Boolean     @default(false) @map("is_verified")
  verificationToken String? @map("verification_token")
  resetToken    String?     @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")
  twoFactorSecret String?   @map("two_factor_secret")
  twoFactorEnabled Boolean  @default(false) @map("two_factor_enabled")
  profileImage  String?     @map("profile_image")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")

  // Relations
  addresses     Address[]
  items         Item[]      @relation("SellerItems")
  bids          Bid[]
  orders        Order[]     @relation("BuyerOrders")
  watchlists    Watchlist[]
  reports       Report[]    @relation("Reporter")
  reportedItems Report[]    @relation("ReportedUser")
  notifications Notification[]
  auditLogs     AuditLog[]
  payouts       Payout[]
  reviews       Review[]    @relation("ReviewAuthor")
  receivedReviews Review[]  @relation("ReviewTarget")

  @@map("users")
}

// 주소 모델
model Address {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  label       String
  receiver    String
  phone       String
  addr1       String
  addr2       String?
  postcode    String
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@index([userId])
  @@map("addresses")
}

// 분재 상품 모델
model Item {
  id              String        @id @default(cuid())
  sellerId        String        @map("seller_id")
  title           String
  description     String?
  species         String        // 수종 (소나무, 주목, 단풍 등)
  style           String?       // 수형 (직간, 곡간, 현애 등)
  sizeClass       String?       @map("size_class") // 크기 분류 (소품, 중품, 대품)
  heightCm        Float?        @map("height_cm")
  crownWidthCm    Float?        @map("crown_width_cm")
  trunkDiameterCm Float?        @map("trunk_diameter_cm")
  ageYearsEst     Int?          @map("age_years_est") // 추정 수령
  healthNotes     String?       @map("health_notes")
  originNotes     String?       @map("origin_notes")
  careHistory     String?       @map("care_history")
  coverImageUrl   String?       @map("cover_image_url")
  status          ItemStatus    @default(DRAFT)

  // 경매 설정
  startPrice      Float         @map("start_price")
  currentPrice    Float         @default(0) @map("current_price")
  buyNowPrice     Float?        @map("buy_now_price")
  reservePrice    Float?        @map("reserve_price")
  bidStep         Float         @map("bid_step") // 최소 입찰 단위
  startsAt        DateTime      @map("starts_at")
  endsAt          DateTime      @map("ends_at")
  autoExtendMinutes Int?        @map("auto_extend_minutes") // 자동연장 시간

  // 배송 정보
  shippingMethod  ShippingMethod @map("shipping_method")
  shippingFeePolicy String?      @map("shipping_fee_policy")
  packagingNotes  String?       @map("packaging_notes")

  viewCount       Int           @default(0) @map("view_count")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")

  // Relations
  seller          User          @relation("SellerItems", fields: [sellerId], references: [id])
  media           ItemMedia[]
  bids            Bid[]
  order           Order?
  watchlists      Watchlist[]
  reports         Report[]
  reviews         Review[]
  auditLogs       AuditLog[]
  tags            ItemTag[]

  @@index([sellerId])
  @@index([status])
  @@index([startsAt])
  @@index([endsAt])
  @@map("items")
}

// 상품 미디어
model ItemMedia {
  id        String      @id @default(cuid())
  itemId    String      @map("item_id")
  url       String
  type      MediaType
  sort      Int         @default(0)
  caption   String?
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  item      Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@map("item_media")
}

// 입찰 모델
model Bid {
  id              String      @id @default(cuid())
  itemId          String      @map("item_id")
  bidderId        String      @map("bidder_id")
  amount          Float
  isProxy         Boolean     @default(false) @map("is_proxy")
  maxProxyAmount  Float?      @map("max_proxy_amount")
  isWinning       Boolean     @default(false) @map("is_winning")
  createdAt       DateTime    @default(now()) @map("created_at")

  // Relations
  item            Item        @relation(fields: [itemId], references: [id])
  bidder          User        @relation(fields: [bidderId], references: [id])

  @@index([itemId])
  @@index([bidderId])
  @@index([createdAt])
  @@map("bids")
}

// 주문 모델
model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique @map("order_number")
  itemId          String        @unique @map("item_id")
  buyerId         String        @map("buyer_id")
  addressId       String?       @map("address_id")
  finalPrice      Float         @map("final_price")
  buyerPremium    Float         @map("buyer_premium")
  sellerFee       Float         @map("seller_fee")
  vat             Float         @default(0)
  shippingFee     Float         @default(0) @map("shipping_fee")
  totalAmount     Float         @map("total_amount")
  paymentStatus   PaymentStatus @map("payment_status")
  paymentMethod   String?       @map("payment_method")
  paymentId       String?       @map("payment_id")
  paidAt          DateTime?     @map("paid_at")
  shippingStatus  ShippingStatus @default(PENDING) @map("shipping_status")
  trackingNumber  String?       @map("tracking_number")
  shippedAt       DateTime?     @map("shipped_at")
  deliveredAt     DateTime?     @map("delivered_at")
  confirmedAt     DateTime?     @map("confirmed_at")
  escrow          Boolean       @default(false)
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  canceledAt      DateTime?     @map("canceled_at")
  cancelReason    String?       @map("cancel_reason")

  // Relations
  item            Item          @relation(fields: [itemId], references: [id])
  buyer           User          @relation("BuyerOrders", fields: [buyerId], references: [id])
  address         Address?      @relation(fields: [addressId], references: [id])
  payout          Payout?

  @@index([buyerId])
  @@index([paymentStatus])
  @@index([createdAt])
  @@map("orders")
}

// 정산 모델
model Payout {
  id            String        @id @default(cuid())
  orderId       String        @unique @map("order_id")
  sellerId      String        @map("seller_id")
  amount        Float
  status        PayoutStatus
  scheduledAt   DateTime      @map("scheduled_at")
  paidAt        DateTime?     @map("paid_at")
  bankName      String?       @map("bank_name")
  accountNumber String?       @map("account_number")
  accountHolder String?       @map("account_holder")
  transactionId String?       @map("transaction_id")
  failureReason String?       @map("failure_reason")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  order         Order         @relation(fields: [orderId], references: [id])
  seller        User          @relation(fields: [sellerId], references: [id])

  @@index([sellerId])
  @@index([status])
  @@map("payouts")
}

// 관심목록
model Watchlist {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  itemId    String      @map("item_id")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@index([userId])
  @@index([itemId])
  @@map("watchlists")
}

// 신고 모델
model Report {
  id          String        @id @default(cuid())
  reporterId  String        @map("reporter_id")
  targetType  ReportTarget  @map("target_type")
  targetId    String        @map("target_id")
  targetUserId String?      @map("target_user_id") // 신고 대상이 사용자인 경우
  targetItemId String?      @map("target_item_id") // 신고 대상이 상품인 경우
  reason      String
  description String?
  evidenceUrl String?       @map("evidence_url")
  status      ReportStatus
  resolvedAt  DateTime?     @map("resolved_at")
  resolvedBy  String?       @map("resolved_by")
  resolution  String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  reporter    User          @relation("Reporter", fields: [reporterId], references: [id])
  targetUser  User?         @relation("ReportedUser", fields: [targetUserId], references: [id])
  targetItem  Item?         @relation(fields: [targetItemId], references: [id])

  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status])
  @@map("reports")
}

// 리뷰 모델
model Review {
  id          String      @id @default(cuid())
  orderId     String      @unique @map("order_id")
  authorId    String      @map("author_id")
  targetId    String      @map("target_id")
  itemId      String      @map("item_id")
  rating      Int         // 1-5
  comment     String?
  images      String[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  author      User        @relation("ReviewAuthor", fields: [authorId], references: [id])
  target      User        @relation("ReviewTarget", fields: [targetId], references: [id])
  item        Item        @relation(fields: [itemId], references: [id])

  @@index([authorId])
  @@index([targetId])
  @@index([itemId])
  @@map("reviews")
}

// 알림 모델
model Notification {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  type        NotificationType
  title       String
  message     String
  data        Json?
  isRead      Boolean           @default(false) @map("is_read")
  readAt      DateTime?         @map("read_at")
  createdAt   DateTime          @default(now()) @map("created_at")

  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// 감사 로그
model AuditLog {
  id          String      @id @default(cuid())
  actorId     String      @map("actor_id")
  action      String
  targetType  String      @map("target_type")
  targetId    String      @map("target_id")
  targetItemId String?    @map("target_item_id")
  diff        Json?
  ip          String?
  userAgent   String?     @map("user_agent")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  actor       User        @relation(fields: [actorId], references: [id])
  targetItem  Item?       @relation(fields: [targetItemId], references: [id])

  @@index([actorId])
  @@index([targetType, targetId])
  @@index([createdAt])
  @@map("audit_logs")
}

// 태그 모델
model Tag {
  id        String      @id @default(cuid())
  name      String      @unique
  slug      String      @unique
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  items     ItemTag[]

  @@map("tags")
}

// 상품-태그 연결 테이블
model ItemTag {
  id        String      @id @default(cuid())
  itemId    String      @map("item_id")
  tagId     String      @map("tag_id")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  item      Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag       Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([itemId, tagId])
  @@index([itemId])
  @@index([tagId])
  @@map("item_tags")
}

// Enums
enum UserRole {
  USER
  SELLER
  ADMIN
  SUPER_ADMIN
}

enum ItemStatus {
  DRAFT
  PENDING_REVIEW
  SCHEDULED
  LIVE
  PAUSED
  ENDED
  SETTLED
  CANCELED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShippingMethod {
  DIRECT_PICKUP
  COURIER
  QUICK
  FREIGHT
}

enum ShippingStatus {
  PENDING
  PREPARING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum PayoutStatus {
  SCHEDULED
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
}

enum ReportTarget {
  ITEM
  BID
  USER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  REJECTED
}

enum NotificationType {
  BID_PLACED
  OUTBID
  AUCTION_WON
  AUCTION_LOST
  PAYMENT_REMINDER
  PAYMENT_RECEIVED
  ITEM_SHIPPED
  ITEM_DELIVERED
  REVIEW_RECEIVED
  ADMIN_MESSAGE
  SYSTEM_NOTICE
}